mean(6,7,8,8,9,10)
x = c(6,7,8,8,9,10)
mean(x)
MG = exp(mean(log(x)))
x = c(6,7,8,8,9,10)
MA = mean(x)
MA
MA = exp(mean(log(x)))
MA = exp(mean(log(x)))
clear
clean
x = c(6,7,8,8,9,10)
MA = mean(x)
MA
x = c(6,7,8,8,9,10)
x
HM = harmonic.mean(x)
HM = harmonic.mean(x)
library("psych")
x
HM = harmonic.mean(x)
HM
require(deSolve)
SEIR <- function(time, current_state, params){
with(as.list(c(current_state, params)),{
N <- S+E+I+R
dS <- B -(beta*S*I)/N - mu*S
dE <- (beta*S*I)/N - sigma*E - mu*E - alpha*E
dI <- sigma*E - gamma*I - mu*I
dR <- gamma*I + sigma*E - mu*R
return(list(c(dS, dE, dI, dR, dM)))
})
}
params <- c(beta=0.5, sigma=0.25, gamma=0.2, mu=0.001)
initial_state <- c(S=999999, E=1, I=0, R=0, M=0)
times <- 0:365
model <- ode(initial_state, times, SEIR, params)
import(deSolve)
require(deSolve)
install.packages('deSolve')
require(deSolve)
SEIR <- function(time, current_state, params){
+
+     with(as.list(c(current_state, params)),{
+         N <- S+E+I+R
+         dS <- B -(beta*S*I)/N - mu*S
+         dE <- (beta*S*I)/N - sigma*E - mu*E - alpha*E
+         dI <- sigma*E - gamma*I - mu*I
+         dR <- gamma*I + sigma*E - mu*R
+
+         return(list(c(dS, dE, dI, dR, dM)))
+     })
SEIR <- function(time, current_state, params){
with(as.list(c(current_state, params)),{
N <- S+E+I+R
dS <- B -(beta*S*I)/N - mu*S
dE <- (beta*S*I)/N - sigma*E - mu*E - alpha*E
dI <- sigma*E - gamma*I - mu*I
dR <- gamma*I + sigma*E - mu*R
return(list(c(dS, dE, dI, dR, dM)))
})
}
View(SEIR)
View(SEIR)
View(SEIR)
model <- ode(initial_state, times, SEIR, params)
params <- c(B = 0.32, beta=0.5, sigma=0.25, gamma=0.2, mu=0.001)
model <- ode(initial_state, times, SEIR, params)
params <- c(B = 0.32, alpha = 0.01, beta=0.5, sigma=0.25, gamma=0.2, mu=0.001)
model <- ode(initial_state, times, SEIR, params)
SEIR <- function(time, current_state, params){
with(as.list(c(current_state, params)),{
N <- S+E+I+R
dS <- B -(beta*S*I)/N - mu*S
dE <- (beta*S*I)/N - sigma*E - mu*E - alpha*E
dI <- sigma*E - gamma*I - mu*I
dR <- gamma*I + sigma*E - mu*R
return(list(c(dS, dE, dI, dR)))
})
}
View(SEIR)
model <- ode(initial_state, times, SEIR, params)
initial_state <- c(S=999999, E=1, I=0, R=0)
model <- ode(initial_state, times, SEIR, params)
require(ggplot2)
install.packages(ggplot2)
"ggplot2"
install.packages("ggplot2")
require("ggplot2")
matplot(model, type="l", lty=1, main="SEIR model", xlab="Time")
legend <- colnames(model)[2:6]
legend("right", legend=legend, col=2:6, lty = 1)
params <- c(B = 0.32, alpha = 0.01, beta=0.5, sigma=0.25, gamma=0.2, mu=0.001)
times <- 0:365
initial_state <- c(S=600, E=250, I=100, R=50)
model <- ode(initial_state, times, SEIR, params)
matplot(model, type="l", lty=1, main="SEIR model", xlab="Time")
> legend <- colnames(model)[2:6]
legend <- colnames(model)[2:6]
legend("right", legend=legend, col=2:6, lty = 1)
legend <- colnames(model)[2:5]
legend("right", legend=legend, col=2:5, lty = 1)
times <- 0:100
matplot(model, type="l", lty=1, main="SEIR model", xlab="Time")
model <- ode(initial_state, times, SEIR, params)
matplot(model, type="l", lty=1, main="SEIR model", xlab="Time")
legend <- colnames(model)[2:6]
legend("right", legend=legend, col=2:6, lty = 1)
legend <- colnames(model)[2:5]
legend("right", legend=legend, col=2:5, lty = 1)
clear
clean
tinytex::install_tinytex()
dim(database)
library(reactable)
library(readxl)
library(tidyverse)
library(reactable)
database <- read_csv("Salary_Dataset_with_Extra_Features.csv", col_names=TRUE)
setwd("C:/Users/iaram/OneDrive/Documentos/GitHub/R-Project")
dir()
database <- read_csv("Salary_Dataset_with_Extra_Features.csv", col_names=TRUE)
View(database)
head(database)
